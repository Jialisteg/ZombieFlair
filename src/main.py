#!/usr/bin/env python3
import os
import sys
import time
from src.simulation import Simulation
from src import logger

class ZombieSimulationCLI:
    """
    Interfaz de l√≠nea de comandos para la Simulaci√≥n de Sensores IoT con Zombis.
    """
    
    def __init__(self):
        """Inicializa el CLI con una nueva simulaci√≥n."""
        self.simulation = Simulation()
        self.running = True
        logger.debug("CLI inicializado")
    
    def clear_screen(self):
        """Limpia la pantalla del terminal."""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_header(self):
        """Imprime el encabezado de la aplicaci√≥n."""
        self.clear_screen()
        print("=" * 80)
        print("üßü SIMULACI√ìN DE SENSORES IOT CON ZOMBIS üßü".center(80))
        if logger.is_debug_enabled():
            print("üîç MODO DEBUG ACTIVADO üîç".center(80))
        print("=" * 80)
        print()
    
    def print_building_state(self):
        """Imprime el estado actual del edificio."""
        if not self.simulation.building:
            print("No hay edificio configurado todav√≠a. Use la opci√≥n 1 para configurar un edificio.")
            return
        
        state = self.simulation.get_building_state()
        
        print(f"\nTurno: {state['turn']}")
        print(f"Estado del Edificio: {state['infested_rooms']}/{state['total_rooms']} habitaciones infestadas")
        print("  Por piso:")
        for floor_idx, floor in enumerate(self.simulation.building.floors):
            zombie_rooms = floor.get_rooms_with_zombies()
            total_rooms = len(floor.get_rooms())
            percentage = (len(zombie_rooms) / total_rooms) * 100 if total_rooms > 0 else 0
            print(f"    - Piso {floor_idx}: {len(zombie_rooms)}/{total_rooms} habitaciones infestadas ({percentage:.1f}%)")
            
            # Si estamos en modo DEBUG, mostrar las habitaciones espec√≠ficas infestadas
            if logger.is_debug_enabled() and zombie_rooms:
                room_numbers = [room.room_number for room in zombie_rooms]
                room_numbers.sort()
                print(f"      Habitaciones infestadas: {', '.join(map(str, room_numbers))}")
        
        print()
        
        # Imprimir cada piso y sus habitaciones, empezando por el piso m√°s alto
        for floor_idx in range(len(self.simulation.building.floors) - 1, -1, -1):
            floor = self.simulation.building.get_floor(floor_idx)
            print(f"Piso {floor_idx}:")
            
            # Imprimir habitaciones en formato de cuadr√≠cula
            rooms_per_row = 5
            rooms = floor.get_rooms()
            
            for i in range(0, len(rooms), rooms_per_row):
                row_rooms = rooms[i:i+rooms_per_row]
                
                # Imprimir n√∫meros de habitaci√≥n
                print("  ", end="")
                for j, room in enumerate(row_rooms):
                    room_type = "Esc" if hasattr(room, 'connected_floors') else "Hab"
                    print(f"{room_type} {room.room_number}", end="")
                    if j < len(row_rooms) - 1:
                        print("          ", end="")
                print()
                
                # Imprimir todos los datos en un solo formato simplificado
                print("  ", end="")
                for j, room in enumerate(row_rooms):
                    # Determinar los elementos visuales
                    zombie = "üßü" if room.has_zombies else "  "
                    icon = "ü™ú" if hasattr(room, 'connected_floors') else "üö™"
                    
                    # Determinar el sensor (las escaleras no tienen sensor)
                    if hasattr(room, 'connected_floors'):
                        sensor = "  "  # No hay sensor
                    else:
                        sensor = "üö®" if room.sensor.is_alert() else "üü¢"
                    
                    # Imprimir todo en un √∫nico formato compacto
                    print(f"[{zombie} {icon} {sensor}]", end="")
                    
                    # A√±adir espaciado entre elementos
                    if j < len(row_rooms) - 1:
                        print("     ", end="")
                print("\n")
            
            print()
        
        if self.simulation.is_game_over():
            print("\nüö® FIN DEL JUEGO: ¬°Todas las habitaciones han sido infestadas con zombis! üö®\n")
    
    def setup_building(self):
        """Configura un nuevo edificio para la simulaci√≥n."""
        self.print_header()
        print("CONFIGURACI√ìN DEL EDIFICIO")
        print("-" * 80)
        print("(Escriba 'salir' para volver al men√∫ principal en cualquier momento)")
        
        # Obtener n√∫mero de pisos
        while True:
            floors_input = input("\nIngrese n√∫mero de pisos: ")
            
            if floors_input.lower() == 'salir':
                return
                
            try:
                floors_count = int(floors_input)
                if floors_count <= 0:
                    print("Error: El n√∫mero de pisos debe ser positivo.")
                    continue
                break
            except ValueError:
                print("Error: Por favor, ingrese un n√∫mero v√°lido.")
        
        # Obtener n√∫mero de habitaciones por piso
        while True:
            rooms_input = input("\nIngrese n√∫mero de habitaciones regulares por piso (sin contar la escalera): ")
            
            if rooms_input.lower() == 'salir':
                return
                
            try:
                rooms_per_floor = int(rooms_input)
                if rooms_per_floor <= 0:
                    print("Error: El n√∫mero de habitaciones debe ser positivo.")
                    continue
                break
            except ValueError:
                print("Error: Por favor, ingrese un n√∫mero v√°lido.")
        
        result = self.simulation.setup_building(floors_count, rooms_per_floor)
        
        print(f"\nConfiguraci√≥n:\n- {floors_count} pisos")
        print(f"- {rooms_per_floor} habitaciones regulares por piso (+ 1 escalera)")
        print(f"- Total de espacios: {result['total_rooms']} ({result['normal_rooms']} habitaciones + {result['staircases']} escaleras)")
        
        # A√±adir zombis iniciales
        while True:
            zombies_input = input("\nIngrese n√∫mero de zombis iniciales: ")
            
            if zombies_input.lower() == 'salir':
                return
                
            try:
                zombie_count = int(zombies_input)
                if zombie_count <= 0:
                    print("Error: El n√∫mero de zombis debe ser positivo.")
                    continue
                break
            except ValueError:
                print("Error: Por favor, ingrese un n√∫mero v√°lido.")
        
        self.simulation.add_initial_zombies(zombie_count)
        
        print("\n¬°Configuraci√≥n del edificio completada!")
        input("Presione Enter para continuar...")
    
    def advance_simulation(self):
        """Avanza la simulaci√≥n en un turno."""
        if not self.simulation.building:
            self.print_header()
            print("No hay edificio configurado todav√≠a. Use la opci√≥n 1 para configurar un edificio.")
            input("Presione Enter para continuar...")
            return
        
        while True:
            result = self.simulation.advance_turn()
            
            self.print_header()
            self.print_building_state()
            
            if "error" in result:
                print(f"Error: {result['error']}")
                logger.error(f"Error al avanzar turno: {result['error']}")
            else:
                print(f"\nTurno {result['turn']} completado.")
                if result['newly_infested']:
                    print(f"Movimientos de zombis: {len(result['newly_infested'])}")
                    if logger.is_debug_enabled():
                        for i, (floor, room) in enumerate(result['newly_infested']):
                            from_floor, from_room = result['vacated_rooms'][i]
                            print(f"  - Zombi movido: ({from_floor},{from_room}) ‚Üí ({floor},{room})")
                else:
                    print("No hubo movimiento de zombis en este turno.")
                    
                if result['new_zombie_generated']:
                    print("¬°Se ha generado un nuevo zombi en una habitaci√≥n aleatoria!")
                print(f"Total de habitaciones infestadas: {result['total_infested']}")
                
                if result['game_over']:
                    print("\nüö® FIN DEL JUEGO: ¬°Todas las habitaciones han sido infestadas con zombis! üö®")
            
            # Dar opciones al usuario
            print("\nMEN√ö DE JUEGO")
            print("-" * 80)
            print("1. Avanzar otro turno (funciona con enter tambi√©n)")
            print("2. Agregar otro Zombie")
            print("3. Limpiar Habitaci√≥n (Eliminar Zombis)")
            print("4. Restablecer Sensor")
            print("5. Activar/Desactivar Generaci√≥n de Zombis")
            print("6. Utilizar el arma secreta")
            print("7. Agregar Practicante")
            print("8. Volver al men√∫ principal")
            
            choice = input("\nIngrese su opci√≥n (1-8): ")
            
            if choice == "8":
                break
            elif choice == "2":
                # Agregar un zombie aleatorio
                added = self.simulation.add_random_zombie()
                if added:
                    print("\n¬°Se ha agregado un nuevo zombi en una habitaci√≥n aleatoria!")
                else:
                    print("\nNo se pudo agregar un nuevo zombi (todas las habitaciones podr√≠an estar infestadas).")
                input("\nPresione Enter para continuar...")
            elif choice == "3":
                self.clean_room()
            elif choice == "4":
                self.reset_sensor()
            elif choice == "5":
                enabled = self.simulation.toggle_zombie_generation()
                if enabled:
                    print("\nüßü Generaci√≥n de zombis ACTIVADA üßü")
                    print("Se generar√° un nuevo zombi aleatorio en cada turno.")
                else:
                    print("\nüßü Generaci√≥n de zombis DESACTIVADA üßü")
                    print("No se generar√°n nuevos zombis durante la simulaci√≥n.")
                input("\nPresione Enter para continuar...")
            elif choice == "6":
                # Utilizar arma secreta (elimina zombis de varias habitaciones)
                cleaned_count = self.simulation.use_secret_weapon()
                if cleaned_count > 0:
                    print(f"\n¬°BOOM! El arma secreta ha eliminado zombis de {cleaned_count} habitaciones.")
                else:
                    print("\nEl arma secreta no tuvo efecto. No hab√≠a zombis para eliminar.")
                input("\nPresione Enter para continuar...")
            elif choice == "7":
                # Agregar Practicante (funcionalidad por implementar)
                print("\nOpci√≥n en desarrollo. Funcionalidad por implementar.")
                input("\nPresione Enter para continuar...")
            else:
                # Opci√≥n 1 o Enter (continuar)
                pass
    
    def clean_room(self):
        """Limpia los zombis de una habitaci√≥n espec√≠fica."""
        if not self.simulation.building:
            self.print_header()
            print("No hay edificio configurado todav√≠a. Use la opci√≥n 1 para configurar un edificio.")
            input("Presione Enter para continuar...")
            return
        
        self.print_header()
        self.print_building_state()
        
        print("\nLIMPIAR HABITACI√ìN (ELIMINAR ZOMBIS)")
        print("-" * 80)
        
        try:
            floor_number = int(input("Ingrese n√∫mero de piso: "))
            room_number = int(input("Ingrese n√∫mero de habitaci√≥n: "))
            
            # Validar que no sea una escalera (habitaci√≥n 0)
            if room_number == 0:
                print("\nError: No se pueden limpiar las escaleras (habitaci√≥n 0).")
                input("\nPresione Enter para continuar...")
                return
            
            result = self.simulation.clean_room(floor_number, room_number)
            
            if "error" in result:
                print(f"\nError: {result['error']}")
            elif result["cleaned"]:
                print(f"\nLa habitaci√≥n {floor_number}-{room_number} ha sido limpiada. Los zombis han sido eliminados.")
                print("Nota: El sensor permanecer√° en alerta hasta que se restablezca manualmente.")
            else:
                print(f"\n{result['message']}")
            
            input("\nPresione Enter para continuar...")
            
        except ValueError:
            print("Por favor, ingrese n√∫meros v√°lidos.")
            logger.warning("Valores inv√°lidos ingresados durante la limpieza de habitaci√≥n")
            input("Presione Enter para continuar...")
    
    def reset_sensor(self):
        """Restablece un sensor en una habitaci√≥n espec√≠fica."""
        if not self.simulation.building:
            self.print_header()
            print("No hay edificio configurado todav√≠a. Use la opci√≥n 1 para configurar un edificio.")
            input("Presione Enter para continuar...")
            return
        
        self.print_header()
        self.print_building_state()
        
        print("\nRESTABLECER SENSOR")
        print("-" * 80)
        
        try:
            floor_number = int(input("Ingrese n√∫mero de piso: "))
            room_number = int(input("Ingrese n√∫mero de habitaci√≥n: "))
            
            # Validar que no sea una escalera (habitaci√≥n 0)
            if room_number == 0:
                print("\nError: Las escaleras (habitaci√≥n 0) no tienen sensores.")
                input("\nPresione Enter para continuar...")
                return
            
            result = self.simulation.reset_sensor(floor_number, room_number)
            
            if "error" in result:
                print(f"\nError: {result['error']}")
            elif result["reset"]:
                print(f"\nEl sensor en la habitaci√≥n {floor_number}-{room_number} ha sido restablecido.")
            else:
                print(f"\n{result['message']}")
            
            input("\nPresione Enter para continuar...")
            
        except ValueError:
            print("Por favor, ingrese n√∫meros v√°lidos.")
            logger.warning("Valores inv√°lidos ingresados durante el restablecimiento del sensor")
            input("Presione Enter para continuar...")
    
    def toggle_debug_mode(self):
        """Activa o desactiva el modo de depuraci√≥n."""
        new_state = not logger.is_debug_enabled()
        logger.set_debug_mode(new_state)
        
        self.print_header()
        if new_state:
            print("üîç Modo DEBUG ACTIVADO üîç")
            print("Los mensajes de depuraci√≥n se mostrar√°n en la consola y se guardar√°n en el archivo de log.")
        else:
            print("üîç Modo DEBUG DESACTIVADO üîç")
            print("Solo los mensajes de error se mostrar√°n en la consola, pero todos los niveles se guardar√°n en el archivo de log.")
        
        input("\nPresione Enter para continuar...")
    
    def show_debug_info(self):
        """Muestra informaci√≥n de depuraci√≥n si el modo DEBUG est√° activado."""
        if not logger.is_debug_enabled():
            self.print_header()
            print("El modo DEBUG est√° desactivado. Active el modo DEBUG primero.")
            input("\nPresione Enter para continuar...")
            return
            
        self.print_header()
        print("INFORMACI√ìN DE DEPURACI√ìN")
        print("-" * 80)
        
        # Mostrar informaci√≥n b√°sica
        print(f"Archivo de log: {logger.log_file}")
        print(f"Modo DEBUG: {'Activado' if logger.is_debug_enabled() else 'Desactivado'}")
        
        # Mostrar informaci√≥n de la simulaci√≥n
        if self.simulation.building:
            state = self.simulation.get_building_state()
            print("\nEstado de la simulaci√≥n:")
            for key, value in state.items():
                print(f"  - {key}: {value}")
            
            # Mostrar informaci√≥n detallada de los pisos
            print("\nInformaci√≥n detallada de pisos:")
            for floor_idx, floor in enumerate(self.simulation.building.floors):
                zombie_rooms = floor.get_rooms_with_zombies()
                print(f"  - Piso {floor_idx}: {len(zombie_rooms)}/{len(floor.rooms)} habitaciones infestadas")
        else:
            print("\nNo hay edificio configurado.")
            
        input("\nPresione Enter para continuar...")
    
    def show_menu(self):
        """Muestra el men√∫ principal y obtiene la entrada del usuario."""
        self.print_header()
        
        if self.simulation.building:
            self.print_building_state()
            
            # Mostrar leyenda de √≠conos
            print("\nLEYENDA:")
            print("üö™ : Habitaci√≥n normal")
            print("ü™ú : Escalera (permite movimiento entre pisos)")
            print("üßü : Zombi")
            print("üö® : Sensor en alerta")
            print("üü¢ : Sensor normal")
        
        print("\nMEN√ö PRINCIPAL")
        print("-" * 80)
        print("0. Instrucciones del Juego")
        print("1. Configurar Edificio")
        print("2. Comenzar Simulaci√≥n")
        print("3. Activar/Desactivar modo DEBUG")
        if logger.is_debug_enabled():
            print("4. Mostrar informaci√≥n de depuraci√≥n")
        print("5. Salir")
        
        max_option = 5
        
        choice = input(f"\nIngrese su opci√≥n (0-{max_option}): ")
        
        if choice == "0":
            self.show_welcome_screen()
        elif choice == "1":
            self.setup_building()
        elif choice == "2":
            # Comenzar Simulaci√≥n
            if not self.simulation.building:
                print("\nNo hay edificio configurado todav√≠a. Redirigiendo a Configurar Edificio...")
                time.sleep(2)
                self.setup_building()
            else:
                self.advance_simulation()
        elif choice == "3":
            self.toggle_debug_mode()
        elif choice == "4" and logger.is_debug_enabled():
            self.show_debug_info()
        elif choice == "5":
            self.running = False
            print("\n¬°Gracias por usar la Simulaci√≥n de Sensores IoT con Zombis!")
            logger.info("Aplicaci√≥n terminada por el usuario")
            time.sleep(1)
        else:
            print("\nOpci√≥n inv√°lida. Por favor, intente de nuevo.")
            input("Presione Enter para continuar...")
    
    def show_welcome_screen(self):
        """Muestra la pantalla de bienvenida con las instrucciones del juego."""
        self.print_header()
        print("¬°Bienvenido a la Simulaci√≥n de Sensores IoT con Zombis!")
        print("\nINSTRUCCIONES DEL JUEGO")
        print("-" * 80)
        print("En esta simulaci√≥n, usted administrar√° un edificio infestado de zombis utilizando")
        print("sensores IoT de Flair de √∫ltima generaci√≥n. Aqu√≠ est√° lo que necesita saber:")
        print("\n1. CONFIGURACI√ìN:")
        print("   - Primero, configure el edificio especificando el n√∫mero de pisos y habitaciones.")
        print("   - Cada piso tendr√° autom√°ticamente una escalera (habitaci√≥n 0) m√°s las habitaciones regulares que especifique.")
        print("   - Luego, indique cu√°ntos zombies iniciales habr√° en el edificio.")
        print("\n2. VISUALIZACI√ìN:")
        print("   - üö™ = Habitaci√≥n normal")
        print("   - ü™ú = Escalera (permite movimiento entre pisos)")
        print("   - üßü = Habitaci√≥n con zombies")
        print("   - üö® = Sensor Flair en estado de alerta")
        print("   - üü¢ = Sensor Flair en estado normal")
        print("\n3. MEC√ÅNICA DEL JUEGO:")
        print("   - Los zombies se propagan a habitaciones adyacentes en cada turno.")
        print("   - Movimiento horizontal: Los zombies se mueven entre habitaciones del mismo piso.")
        print("   - Movimiento vertical: Los zombies pueden moverse entre pisos √öNICAMENTE usando")
        print("     las escaleras (habitaci√≥n 0 de cada piso, marcada con ü™ú  ).")
        print("   - Las escaleras NO tienen sensores (falt√≥ presupuesto), pero permiten a los zombies moverse arriba/abajo.")
        print("   - Puede limpiar habitaciones de zombies y restablecer sensores.")
        print("   - El juego termina cuando todas las habitaciones est√°n infestadas.")
        print("\n4. CARACTER√çSTICAS ESPECIALES:")
        print("   - Modo DEBUG disponible para ver informaci√≥n detallada.")
        print("   - Los eventos se registran en archivos de log para su revisi√≥n.")
        print("\nPara comenzar, seleccione la opci√≥n 1 en el men√∫ principal para configurar el edificio.")
        print("-" * 80)
        input("\nPresione Enter para continuar...")

    def toggle_zombie_generation(self):
        """Activa o desactiva la generaci√≥n aleatoria de zombis."""
        if not self.simulation.building:
            self.print_header()
            print("No hay edificio configurado todav√≠a. Use la opci√≥n 1 para configurar un edificio.")
            input("Presione Enter para continuar...")
            return
            
        enabled = self.simulation.toggle_zombie_generation()
        self.print_header()
        if enabled:
            print("üßü Generaci√≥n de zombis ACTIVADA üßü")
            print("Se generar√° un nuevo zombi aleatorio en cada turno.")
        else:
            print("üßü Generaci√≥n de zombis DESACTIVADA üßü")
            print("No se generar√°n nuevos zombis durante la simulaci√≥n.")
        input("\nPresione Enter para continuar...")

    def run(self):
        """Ejecuta el bucle principal de la aplicaci√≥n."""
        try:
            # Mostrar pantalla de bienvenida al inicio
            self.show_welcome_screen()
            
            while self.running:
                self.show_menu()
        except KeyboardInterrupt:
            print("\n\nAplicaci√≥n interrumpida por el usuario.")
            logger.info("Aplicaci√≥n interrumpida por el usuario (KeyboardInterrupt)")
        except Exception as e:
            print(f"\n\nError inesperado: {str(e)}")
            logger.critical(f"Error inesperado: {str(e)}\nTraceback:\n{sys.exc_info()[2]}")
        finally:
            print("\n¬°Gracias por usar la Simulaci√≥n de Sensores IoT con Zombis!")


if __name__ == "__main__":
    app = ZombieSimulationCLI()
    app.run() 