{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for API requests\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Fetch the current state of the simulation\nexport const fetchSimulationState = async () => {\n  try {\n    const response = await apiClient.get('/simulation/state');\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Setup a new building for the simulation\nexport const setupBuilding = async config => {\n  try {\n    const response = await apiClient.post('/simulation/setup', config);\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Advance the simulation by one turn\nexport const advanceSimulation = async () => {\n  try {\n    const response = await apiClient.post('/simulation/advance');\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Add a zombie to a random room\nexport const addZombie = async () => {\n  try {\n    const response = await apiClient.post('/simulation/add-zombie');\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Add a practicante to a random room without zombies\nexport const addPracticante = async () => {\n  try {\n    const response = await apiClient.post('/simulation/add-practicante');\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Clean a room (remove zombies)\nexport const cleanRoom = async (floor, room) => {\n  try {\n    const response = await apiClient.post('/simulation/clean-room', {\n      floor,\n      room\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Reset a sensor in a room\nexport const resetSensor = async (floor, room) => {\n  try {\n    const response = await apiClient.post('/simulation/reset-sensor', {\n      floor,\n      room\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Toggle automatic zombie generation\nexport const toggleZombieGeneration = async () => {\n  try {\n    const response = await apiClient.post('/simulation/toggle-zombie-generation');\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Use the secret weapon to clean multiple rooms\nexport const triggerSecretWeapon = async () => {\n  try {\n    const response = await apiClient.post('/simulation/use-secret-weapon');\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Toggle automatic simulation running\nexport const autoRun = async shouldRun => {\n  try {\n    const response = await apiClient.post('/simulation/auto-run', {\n      run: shouldRun\n    });\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Reset the simulation\nexport const resetSimulation = async () => {\n  try {\n    const response = await apiClient.post('/simulation/reset');\n    return response.data;\n  } catch (error) {\n    handleApiError(error);\n    throw error;\n  }\n};\n\n// Helper function to handle API errors\nconst handleApiError = error => {\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('API Error Response:', error.response.data);\n    console.error('Status:', error.response.status);\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('API Error Request:', error.request);\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('API Error Message:', error.message);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","apiClient","create","baseURL","headers","fetchSimulationState","response","get","data","error","handleApiError","setupBuilding","config","post","advanceSimulation","addZombie","addPracticante","cleanRoom","floor","room","resetSensor","toggleZombieGeneration","triggerSecretWeapon","autoRun","shouldRun","run","resetSimulation","console","status","request","message"],"sources":["C:/Users/jiali/OneDrive/Escritorio/Javier_Entrevista/frontend/src/api/simulationApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for API requests\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n    ? '/api' \r\n    : 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n    }\r\n});\r\n\r\n// Fetch the current state of the simulation\r\nexport const fetchSimulationState = async () => {\r\n    try {\r\n        const response = await apiClient.get('/simulation/state');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Setup a new building for the simulation\r\nexport const setupBuilding = async (config) => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/setup', config);\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Advance the simulation by one turn\r\nexport const advanceSimulation = async () => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/advance');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Add a zombie to a random room\r\nexport const addZombie = async () => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/add-zombie');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Add a practicante to a random room without zombies\r\nexport const addPracticante = async () => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/add-practicante');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Clean a room (remove zombies)\r\nexport const cleanRoom = async (floor, room) => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/clean-room', { floor, room });\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Reset a sensor in a room\r\nexport const resetSensor = async (floor, room) => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/reset-sensor', { floor, room });\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Toggle automatic zombie generation\r\nexport const toggleZombieGeneration = async () => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/toggle-zombie-generation');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Use the secret weapon to clean multiple rooms\r\nexport const triggerSecretWeapon = async () => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/use-secret-weapon');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Toggle automatic simulation running\r\nexport const autoRun = async (shouldRun) => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/auto-run', { run: shouldRun });\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Reset the simulation\r\nexport const resetSimulation = async () => {\r\n    try {\r\n        const response = await apiClient.post('/simulation/reset');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleApiError(error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Helper function to handle API errors\r\nconst handleApiError = (error) => {\r\n    if (error.response) {\r\n        // The request was made and the server responded with a status code\r\n        // that falls out of the range of 2xx\r\n        console.error('API Error Response:', error.response.data);\r\n        console.error('Status:', error.response.status);\r\n    } else if (error.request) {\r\n        // The request was made but no response was received\r\n        console.error('API Error Request:', error.request);\r\n    } else {\r\n        // Something happened in setting up the request that triggered an Error\r\n        console.error('API Error Message:', error.message);\r\n    }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACpD,MAAM,GACN,2BAA2B;;AAEjC;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC3BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACL,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;EACd;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,mBAAmB,CAAC;IACzD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC3C,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,mBAAmB,EAAED,MAAM,CAAC;IAClE,OAAON,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,qBAAqB,CAAC;IAC5D,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,wBAAwB,CAAC;IAC/D,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMO,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,6BAA6B,CAAC;IACpE,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMQ,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,KAAK;EAC5C,IAAI;IACA,MAAMb,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,wBAAwB,EAAE;MAAEK,KAAK;MAAEC;IAAK,CAAC,CAAC;IAChF,OAAOb,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMW,WAAW,GAAG,MAAAA,CAAOF,KAAK,EAAEC,IAAI,KAAK;EAC9C,IAAI;IACA,MAAMb,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,0BAA0B,EAAE;MAAEK,KAAK;MAAEC;IAAK,CAAC,CAAC;IAClF,OAAOb,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMY,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EAC9C,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,sCAAsC,CAAC;IAC7E,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMa,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACA,MAAMhB,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,+BAA+B,CAAC;IACtE,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMc,OAAO,GAAG,MAAOC,SAAS,IAAK;EACxC,IAAI;IACA,MAAMlB,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,sBAAsB,EAAE;MAAEY,GAAG,EAAED;IAAU,CAAC,CAAC;IACjF,OAAOlB,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMiB,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA,MAAMpB,QAAQ,GAAG,MAAML,SAAS,CAACY,IAAI,CAAC,mBAAmB,CAAC;IAC1D,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,cAAc,CAACD,KAAK,CAAC;IACrB,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,MAAMC,cAAc,GAAID,KAAK,IAAK;EAC9B,IAAIA,KAAK,CAACH,QAAQ,EAAE;IAChB;IACA;IACAqB,OAAO,CAAClB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;IACzDmB,OAAO,CAAClB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACH,QAAQ,CAACsB,MAAM,CAAC;EACnD,CAAC,MAAM,IAAInB,KAAK,CAACoB,OAAO,EAAE;IACtB;IACAF,OAAO,CAAClB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACoB,OAAO,CAAC;EACtD,CAAC,MAAM;IACH;IACAF,OAAO,CAAClB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACqB,OAAO,CAAC;EACtD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}